name: Deploy site to Firebase

on:
  push:
    branches: [main]
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        working-directory: site
        run: |
          if [ -f site/package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Build site
        working-directory: site
        run: npm run build

      - name: Authenticate with Google (Workload Identity)
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: "projects/618864609917/locations/global/workloadIdentityPools/github-pool/providers/github-provider-bbasketballer75"
          service_account: "theporadas-deployer@the-poradas-2025-813c7.iam.gserviceaccount.com"
          token_format: access_token
          access_token_scopes: https://www.googleapis.com/auth/cloud-platform
          audience: "repo:bbasketballer75/theporadas_site:ref:refs/heads/main"

      - name: Set up gcloud SDK
        run: |
          sudo apt-get update -y
          sudo apt-get install -y gnupg curl apt-transport-https ca-certificates
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list
          sudo apt-get update -y
          sudo apt-get install -y google-cloud-sdk

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@latest

      - name: Preflight: check service-account act-as permission
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          set -euo pipefail
          DEPLOYER_SA="theporadas-deployer@the-poradas-2025-813c7.iam.gserviceaccount.com"
          RUNTIME_SA="${FIREBASE_PROJECT_ID}@appspot.gserviceaccount.com"

          echo "Checking project-level binding for roles/iam.serviceAccountUser..."
          if gcloud projects get-iam-policy "$FIREBASE_PROJECT_ID" --flatten="bindings[]" \
              --filter="bindings.role=roles/iam.serviceAccountUser AND bindings.members:$DEPLOYER_SA" \
              --format="value(bindings.role)" | grep -q .; then
            echo "Project-level Service Account User binding found."
            exit 0
          fi

          echo "Checking service-account-level IAM..."
          if gcloud iam service-accounts get-iam-policy "$RUNTIME_SA" --project="$FIREBASE_PROJECT_ID" --format=json | grep -q "$DEPLOYER_SA"; then
            echo "Service-account-level Service Account User binding found."
            exit 0
          fi

          echo "ERROR: the deployer service account ($DEPLOYER_SA) does not have roles/iam.serviceAccountUser on the runtime service account ($RUNTIME_SA)."
          echo "Please grant Service Account User (roles/iam.serviceAccountUser) to $DEPLOYER_SA on $RUNTIME_SA or project $FIREBASE_PROJECT_ID."
          exit 1

      - name: Deploy Hosting
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          echo "Deploying hosting to Firebase project: $FIREBASE_PROJECT_ID"
          FIREBASE_TOKEN=$(gcloud auth application-default print-access-token)
          firebase deploy --only hosting --project "$FIREBASE_PROJECT_ID" --token "$FIREBASE_TOKEN"
