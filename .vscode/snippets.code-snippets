{
  "React Component with Props": {
    "prefix": "rfc",
    "body": [
      "/**",
      " * ${1:ComponentName} Component",
      " * ${2:Description}",
      " * ",
      " * @param {${3:Props}} props - Component props",
      " */",
      "export default function ${1:ComponentName}({ ${4:propName} }) {",
      "  return (",
      "    <div className=\"${5:className}\">",
      "      $0",
      "    </div>",
      "  );",
      "}",
    ],
    "description": "React functional component with props",
  },
  "useState Hook": {
    "prefix": "ust",
    "body": ["const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialValue});"],
    "description": "useState hook with camelCase setter",
  },
  "useEffect Hook": {
    "prefix": "uef",
    "body": [
      "useEffect(() => {",
      "  ${1:// Effect logic}",
      "  ",
      "  return () => {",
      "    ${2:// Cleanup}",
      "  };",
      "}, [${3:dependencies}]);",
    ],
    "description": "useEffect hook with cleanup",
  },
  "Firestore Query": {
    "prefix": "fsquery",
    "body": [
      "const q = query(",
      "  collection(db, '${1:collectionName}'),",
      "  ${2:where('field', '==', 'value'),}",
      "  orderBy('${3:field}', '${4|desc,asc|}')",
      ");",
      "",
      "const unsubscribe = onSnapshot(",
      "  q,",
      "  (snapshot) => {",
      "    const items = [];",
      "    snapshot.forEach((doc) => {",
      "      items.push({",
      "        id: doc.id,",
      "        ...doc.data(),",
      "      });",
      "    });",
      "    ",
      "    ${5:setData}(items);",
      "  },",
      "  (error) => {",
      "    console.error('Firestore error:', error);",
      "  }",
      ");",
      "",
      "return () => unsubscribe();",
    ],
    "description": "Firestore real-time query with onSnapshot",
  },
  "Firestore Add Document": {
    "prefix": "fsadd",
    "body": [
      "const docRef = await addDoc(collection(db, '${1:collectionName}'), {",
      "  ${2:field}: ${3:value},",
      "  timestamp: serverTimestamp(),",
      "});",
      "",
      "console.log('Document created:', docRef.id);",
    ],
    "description": "Add document to Firestore collection",
  },
  "Next.js Image": {
    "prefix": "nimg",
    "body": [
      "<Image",
      "  src={${1:src}}",
      "  alt=\"${2:alt text}\"",
      "  width={${3:800}}",
      "  height={${4:600}}",
      "  className=\"${5:className}\"",
      "  sizes=\"${6:(max-width: 768px) 100vw, 50vw}\"",
      "  quality={${7:85}}",
      "  loading=\"${8|lazy,eager|}\"",
      "/>",
    ],
    "description": "Next.js optimized Image component",
  },
  "Next.js Link": {
    "prefix": "nlink",
    "body": [
      "<Link href=\"${1:/path}\" className=\"${2:className}\">",
      "  ${3:Link text}",
      "</Link>",
    ],
    "description": "Next.js Link component",
  },
  "Console Log": {
    "prefix": "clg",
    "body": ["console.log('[${1:Component}] ${2:message}:', ${3:variable});"],
    "description": "Console log with context",
  },
  "Try-Catch Block": {
    "prefix": "tryc",
    "body": [
      "try {",
      "  ${1:// Try block}",
      "} catch (error) {",
      "  console.error('[${2:Context}] Error:', error);",
      "  ${3:// Error handling}",
      "}",
    ],
    "description": "Try-catch block with logging",
  },
  "Async Function": {
    "prefix": "afn",
    "body": [
      "const ${1:functionName} = async (${2:params}) => {",
      "  try {",
      "    ${3:// Async logic}",
      "  } catch (error) {",
      "    console.error('[${1}] Error:', error);",
      "    throw error;",
      "  }",
      "};",
    ],
    "description": "Async arrow function with error handling",
  },
  "JSDoc Type Comment": {
    "prefix": "jsd",
    "body": [
      "/**",
      " * @typedef {Object} ${1:TypeName}",
      " * @property {${2:string}} ${3:propertyName} - ${4:Description}",
      " */",
    ],
    "description": "JSDoc type definition",
  },
  "Tailwind Container": {
    "prefix": "twc",
    "body": [
      "<div className=\"container mx-auto px-4 py-${1:8} max-w-${2|7xl,6xl,5xl,4xl,3xl,2xl,xl,lg|}\">",
      "  $0",
      "</div>",
    ],
    "description": "Tailwind responsive container",
  },
  "Loading Spinner": {
    "prefix": "spin",
    "body": [
      "<div className=\"flex items-center justify-center p-${1:8}\">",
      "  <div className=\"animate-spin rounded-full h-${2:12} w-${2:12} border-b-2 border-${3:sage}\"></div>",
      "  <p className=\"ml-4 text-gray-600\">${4:Loading...}</p>",
      "</div>",
    ],
    "description": "Loading spinner component",
  },
  "Error Message": {
    "prefix": "errmsg",
    "body": [
      "<div className=\"bg-red-50 border border-red-200 rounded-lg p-${1:6}\">",
      "  <h3 className=\"text-red-800 font-semibold mb-2\">${2:Error Title}</h3>",
      "  <p className=\"text-red-600\">{${3:error.message}}</p>",
      "</div>",
    ],
    "description": "Error message display",
  },
}
