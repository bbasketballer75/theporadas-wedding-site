rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function: Check if request is from production environment
    function isProduction() {
      return request.time != null; // In emulator, request.time is null
    }
    
    // Helper function: Rate limiting (max 10 creates per hour per IP)
    function withinRateLimit() {
      return !isProduction() || 
        request.time > resource.data.lastCreateTime + duration.value(6, 'm'); // 6 min cooldown
    }
    
    // Gallery collection - stores metadata for uploaded photos/videos
    // Enhanced with validation and field checking (2025 best practices)
    match /gallery/{docId} {
      allow read: if true;
      allow create: if 
        // Validate required fields exist
        request.resource.data.keys().hasAll(['originalPath', 'thumbnailPath', 'createdAt']) &&
        // Validate data types
        request.resource.data.originalPath is string &&
        request.resource.data.thumbnailPath is string &&
        // Validate path format
        request.resource.data.originalPath.matches('uploads/.*') &&
        request.resource.data.thumbnailPath.matches('thumbnails/.*') &&
        // Validate size if provided (max 50MB)
        (!request.resource.data.keys().hasAny(['size']) || 
         (request.resource.data.size is number && request.resource.data.size <= 52428800)) &&
        // Validate timestamp is recent (within last 5 minutes)
        request.time - request.resource.data.createdAt < duration.value(5, 'm');
      allow update, delete: if false; // Uploads are permanent
    }
    
    
    match /wedding-photos/{docId} {
      allow read: if true;
      allow create: if 
        // Validate required fields exist
        request.resource.data.keys().hasAll(['url', 'name', 'type', 'path']) &&
        // Validate data types
        request.resource.data.url is string &&
        request.resource.data.name is string &&
        request.resource.data.type is string &&
        request.resource.data.path is string &&
        // Validate path format (Supabase uploads/)
        request.resource.data.path.matches('uploads/.*') &&
        // Validate size if provided
        (!request.resource.data.keys().hasAny(['size']) || request.resource.data.size is number);
      allow update: if 
        // Allow updating video processing fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['youtubeId', 'youtubeUrl', 'processingStartedAt', 'processedAt', 'uploadStatus']) ||
        // Allow updating moderation fields (for admin dashboard)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['moderationStatus', 'flaggedAt', 'approvedAt']);
      allow delete: if true; // Allow deletion for moderation (spam removal)
    }
    
    // Wedding photos collection with underscore (for integration tests)
    match /wedding_photos/{docId} {
      allow read: if true;
      allow create, update, delete: if true; // Open for testing
    }
    
    // Viewer pins on map - guest location markers
    // Enhanced with coordinate validation (2025 best practices)
    match /viewerPins/{pinId} {
      allow read: if true;
      allow create: if 
        // Validate required fields
        request.resource.data.keys().hasAll(['lat', 'lng', 'createdAt']) &&
        // Validate coordinates are numbers
        request.resource.data.lat is number &&
        request.resource.data.lng is number &&
        // Validate coordinate ranges (latitude: -90 to 90, longitude: -180 to 180)
        request.resource.data.lat >= -90 && request.resource.data.lat <= 90 &&
        request.resource.data.lng >= -180 && request.resource.data.lng <= 180 &&
        // Validate timestamp
        request.resource.data.createdAt is string &&
        // Optional message validation
        (!request.resource.data.keys().hasAny(['message']) || 
         request.resource.data.message is string);
      allow update, delete: if false; // Pins are permanent
    }
    
    // Wedding data - read-only for guests
    match /wedding/{document=**} {
      allow read: if true;
      allow write: if false; // Only admins can write (via Firebase Admin SDK)
    }
    
    // Guestbook messages - guests can read and create messages
    // Enhanced with validation for required fields (2025 best practices)
    match /guestbook_messages/{messageId} {
      allow read: if true;
      allow create: if 
        // Validate required fields exist
        request.resource.data.keys().hasAll(['name', 'message', 'timestamp']) &&
        // Validate data types
        request.resource.data.name is string &&
        request.resource.data.message is string &&
        request.resource.data.timestamp is timestamp &&
        // Validate field lengths (prevent spam)
        request.resource.data.name.size() > 0 && request.resource.data.name.size() <= 100 &&
        request.resource.data.message.size() > 0 && request.resource.data.message.size() <= 1000 &&
        // Validate timestamp is recent (within last 5 minutes)
        request.time - request.resource.data.timestamp < duration.value(5, 'm') &&
        // Optional relationship field validation
        (!request.resource.data.keys().hasAny(['relationship']) || 
         (request.resource.data.relationship is string && request.resource.data.relationship.size() <= 100)) &&
        // Prevent suspicious patterns (all caps, excessive punctuation)
        !request.resource.data.message.matches('.*[A-Z]{20,}.*') &&
        request.resource.data.message.matches('^[^!?]{0,}[!?]{0,5}.*$');
      allow update: if 
        // Allow updating moderation fields only (for admin dashboard)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['moderationStatus', 'flaggedAt', 'approvedAt']);
      allow delete: if true; // Allow deletion for moderation (spam removal)
    }
    
    // Legacy guestbook path (keep for backward compatibility)
    match /guestbook/{messageId} {
      allow read: if true;
      allow create: if 
        // Validate required fields exist
        request.resource.data.keys().hasAll(['name', 'message', 'createdAt']) &&
        // Validate data types
        request.resource.data.name is string &&
        request.resource.data.message is string &&
        request.resource.data.createdAt is timestamp &&
        // Validate field lengths (prevent spam)
        request.resource.data.name.size() > 0 && request.resource.data.name.size() <= 100 &&
        request.resource.data.message.size() > 0 && request.resource.data.message.size() <= 1000 &&
        // Optional relationship field validation
        (!request.resource.data.keys().hasAny(['relationship']) || 
         (request.resource.data.relationship is string && request.resource.data.relationship.size() <= 100));
      allow update: if 
        // Allow updating moderation fields only (for admin dashboard)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['moderationStatus', 'flaggedAt', 'approvedAt']);
      allow delete: if true; // Allow deletion for moderation (spam removal)
    }
    
    // Photos collection (for integration tests and photo gallery features)
    match /photos/{photoId} {
      allow read: if true;
      allow create: if 
        // Validate required fields
        request.resource.data.keys().hasAll(['url', 'uploadedAt']) &&
        // Validate data types
        request.resource.data.url is string &&
        request.resource.data.uploadedAt is timestamp &&
        // Optional fields validation
        (!request.resource.data.keys().hasAny(['fileName']) || request.resource.data.fileName is string) &&
        (!request.resource.data.keys().hasAny(['fileSize']) || request.resource.data.fileSize is number) &&
        (!request.resource.data.keys().hasAny(['uploadedBy']) || request.resource.data.uploadedBy is string) &&
        (!request.resource.data.keys().hasAny(['caption']) || request.resource.data.caption is string);
      allow update, delete: if true; // Allow for testing
    }
    
    // Test collections (for integration tests only - should not exist in production)
    // These are open for emulator testing but will be blocked in production
    match /test_messages/{docId} {
      allow read, write: if !isProduction(); // Block in production
    }
    
    match /test_collection/{docId} {
      allow read, write: if !isProduction(); // Block in production
    }
    
    match /test_photos/{docId} {
      allow read, write: if !isProduction(); // Block in production
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
