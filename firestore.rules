rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Gallery collection - stores metadata for uploaded photos/videos
    // Enhanced with validation and field checking (2025 best practices)
    match /gallery/{docId} {
      allow read: if true;
      allow create: if 
        // Validate required fields exist
        request.resource.data.keys().hasAll(['originalPath', 'thumbnailPath', 'createdAt']) &&
        // Validate data types
        request.resource.data.originalPath is string &&
        request.resource.data.thumbnailPath is string &&
        // Validate path format
        request.resource.data.originalPath.matches('uploads/.*') &&
        request.resource.data.thumbnailPath.matches('thumbnails/.*') &&
        // Validate size if provided
        (!request.resource.data.keys().hasAny(['size']) || request.resource.data.size is number);
      allow update, delete: if false; // Uploads are permanent
    }
    
    // Wedding photos collection - stores uploaded media metadata (GUEST UPLOADS)
    match /wedding-photos/{docId} {
      allow read: if true;
      allow create: if 
        // Validate required fields exist
        request.resource.data.keys().hasAll(['url', 'name', 'type', 'path']) &&
        // Validate data types
        request.resource.data.url is string &&
        request.resource.data.name is string &&
        request.resource.data.type is string &&
        request.resource.data.path is string &&
        // Validate path format (Supabase uploads/)
        request.resource.data.path.matches('uploads/.*') &&
        // Validate size if provided
        (!request.resource.data.keys().hasAny(['size']) || request.resource.data.size is number);
      allow update: if 
        // Allow updating video processing fields
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['youtubeId', 'youtubeUrl', 'processingStartedAt', 'processedAt', 'uploadStatus']) ||
        // Allow updating moderation fields (for admin dashboard)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['moderationStatus', 'flaggedAt', 'approvedAt']);
      allow delete: if true; // Allow deletion for moderation (spam removal)
    }
    
    // Viewer pins on map - guest location markers
    // Enhanced with coordinate validation (2025 best practices)
    match /viewerPins/{pinId} {
      allow read: if true;
      allow create: if 
        // Validate required fields
        request.resource.data.keys().hasAll(['lat', 'lng', 'createdAt']) &&
        // Validate coordinates are numbers
        request.resource.data.lat is number &&
        request.resource.data.lng is number &&
        // Validate coordinate ranges (latitude: -90 to 90, longitude: -180 to 180)
        request.resource.data.lat >= -90 && request.resource.data.lat <= 90 &&
        request.resource.data.lng >= -180 && request.resource.data.lng <= 180 &&
        // Validate timestamp
        request.resource.data.createdAt is string &&
        // Optional message validation
        (!request.resource.data.keys().hasAny(['message']) || 
         request.resource.data.message is string);
      allow update, delete: if false; // Pins are permanent
    }
    
    // Wedding data - read-only for guests
    match /wedding/{document=**} {
      allow read: if true;
      allow write: if false; // Only admins can write (via Firebase Admin SDK)
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
